<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
	    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <context:component-scan base-package="org.jumbodb.database.service" />


    <bean id="jumboConfigLoader" class="org.jumbodb.database.configuration.JumboConfigurationLoader">
        <constructor-arg value="/etc/jumbodb.conf"/>
    </bean>

    <bean id="jumboConfigProperties" factory-bean="jumboConfigLoader" factory-method="loadConfiguration"/>

    <context:property-placeholder
            properties-ref="jumboConfigProperties"
            local-override="false"
            ignore-resource-not-found="true"
            ignore-unresolvable="true"
            file-encoding="UTF-8" />

    <bean id="jumboConfig" class="org.jumbodb.database.service.configuration.JumboConfiguration">
        <constructor-arg value="${jumbodb.query.port}"/>
        <constructor-arg value="${jumbodb.import.port}"/>
        <constructor-arg value="${jumbodb.datapath}"/>
        <constructor-arg value="${jumbodb.indexpath}"/>
    </bean>

    <bean id="initializer" class="org.jumbodb.database.bootstrap.JumboDBInitializer" init-method="initialize">
        <constructor-arg ref="jumboConfig"/>
    </bean>

    <bean id="indexFileExecutor" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool" destroy-method="shutdown">
        <constructor-arg value="${jumbodb.index.threadpool.size}" />
    </bean>

    <bean id="baseNumberIndexStrategy" abstract="true" class="org.jumbodb.database.service.query.index.snappy.NumberSnappyIndexStrategy">
        <property name="indexFileExecutor" ref="indexFileExecutor"/>
        <property name="indexBlockRangesCache" ref="indexBlockRangesCache"/>
        <property name="indexCompressionBlocksCache" ref="indexCompressionBlocksCache"/>
        <property name="indexQueryCache" ref="indexQueryCache"/>
    </bean>

    <bean id="indexStrategyManager" class="org.jumbodb.database.service.query.index.IndexStrategyManager">
        <property name="strategies">
            <list>
                <bean class="org.jumbodb.database.service.query.index.snappy.HashCode32SnappyIndexStrategy" parent="baseNumberIndexStrategy" />
                <bean class="org.jumbodb.database.service.query.index.snappy.HashCode64SnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.IntegerSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.FloatSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.DoubleSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.LongSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.DateTimeSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.snappy.GeohashSnappyIndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.HashCode32Lz4IndexStrategy" parent="baseNumberIndexStrategy" />
                <bean class="org.jumbodb.database.service.query.index.lz4.HashCode64Lz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.IntegerLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.FloatLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.DoubleLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.LongLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.DateTimeLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.lz4.GeohashLz4IndexStrategy" parent="baseNumberIndexStrategy"/>
                <bean class="org.jumbodb.database.service.query.index.notfound.NotFoundIndexStrategy"/>
            </list>
        </property>

    </bean>

    <bean id="retrieveDataExecutor" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool" destroy-method="shutdown">
        <constructor-arg value="${jumbodb.data.threadpool.size}" />
    </bean>

    <bean factory-bean="cacheManager" factory-method="getCache" id="datasetsByOffsetsCache">
        <constructor-arg value="data.datasets.byoffsets"/>
    </bean>

    <bean factory-bean="cacheManager" factory-method="getCache" id="dataCompressionBlocksCache">
        <constructor-arg value="data.compression.blocks"/>
    </bean>

    <bean factory-bean="cacheManager" factory-method="getCache" id="indexCompressionBlocksCache">
        <constructor-arg value="index.compression.blocks"/>
    </bean>

    <bean factory-bean="cacheManager" factory-method="getCache" id="indexBlockRangesCache">
        <constructor-arg value="index.block.ranges"/>
    </bean>

    <bean factory-bean="cacheManager" factory-method="getCache" id="indexQueryCache">
        <constructor-arg value="index.query.offsets"/>
    </bean>

    <bean id="dataStrategyManager" class="org.jumbodb.database.service.query.data.DataStrategyManager">
        <property name="strategies">
            <list>
                <bean class="org.jumbodb.database.service.query.data.snappy.JsonSnappyDataStrategy">
                    <property name="retrieveDataExecutor" ref="retrieveDataExecutor"/>
                    <property name="datasetsByOffsetsCache" ref="datasetsByOffsetsCache"/>
                    <property name="dataCompressionBlocksCache" ref="dataCompressionBlocksCache"/>
                </bean>
                <bean class="org.jumbodb.database.service.query.data.lz4.JsonLz4DataStrategy">
                    <property name="retrieveDataExecutor" ref="retrieveDataExecutor"/>
                    <property name="datasetsByOffsetsCache" ref="datasetsByOffsetsCache"/>
                    <property name="dataCompressionBlocksCache" ref="dataCompressionBlocksCache"/>
                </bean>
                <bean class="org.jumbodb.database.service.query.data.snappy.JsonSnappyLineBreakDataStrategy">
                    <property name="retrieveDataExecutor" ref="retrieveDataExecutor"/>
                    <property name="datasetsByOffsetsCache" ref="datasetsByOffsetsCache"/>
                    <property name="dataCompressionBlocksCache" ref="dataCompressionBlocksCache"/>
                </bean>
                <bean class="org.jumbodb.database.service.query.data.lz4.JsonLz4LineBreakDataStrategy">
                    <property name="retrieveDataExecutor" ref="retrieveDataExecutor"/>
                    <property name="datasetsByOffsetsCache" ref="datasetsByOffsetsCache"/>
                    <property name="dataCompressionBlocksCache" ref="dataCompressionBlocksCache"/>
                </bean>
                <bean class="org.jumbodb.database.service.query.data.notfound.NotFoundDataStrategy"/>
            </list>
        </property>

    </bean>

    <bean id="chunkExecutor" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool" destroy-method="shutdown">
    </bean>

    <bean id="indexExecutor" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool" destroy-method="shutdown">
    </bean>

    <bean id="jumboQueryConverterService" class="org.jumbodb.database.service.query.JumboQueryConverterService"></bean>

    <bean id="jumboSearcher" class="org.jumbodb.database.service.query.JumboSearcher" init-method="onInitialize">
        <property name="chunkExecutor" ref="chunkExecutor"/>
        <property name="indexExecutor" ref="indexExecutor"/>
        <property name="dataStrategyManager" ref="dataStrategyManager"/>
        <property name="indexStrategyManager" ref="indexStrategyManager"/>
        <property name="jumboConfiguration" ref="jumboConfig"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <bean id="queryServer" class="org.jumbodb.database.service.query.QueryServer" init-method="start" destroy-method="stop">
        <constructor-arg ref="jumboConfig"/>
        <constructor-arg ref="jumboSearcher"/>
        <constructor-arg ref="jumboQueryConverterService"/>
        <constructor-arg value="${jumbodb.query.timeout.seconds}"/>
    </bean>

    <bean id="importServer" class="org.jumbodb.database.service.importer.ImportServer" init-method="start" destroy-method="stop">
        <constructor-arg ref="jumboConfig"/>
        <constructor-arg ref="jumboSearcher"/>
    </bean>

    <bean id="storageManagement" class="org.jumbodb.database.service.management.storage.StorageManagement">
        <constructor-arg ref="jumboConfig"/>
        <constructor-arg ref="jumboSearcher"/>
        <constructor-arg ref="importServer"/>
    </bean>

    <bean id="statusService" class="org.jumbodb.database.service.management.status.StatusService">
        <constructor-arg ref="jumboConfig"/>
    </bean>

    <bean id="exportDeliveryExecutor" class="java.util.concurrent.Executors" factory-method="newSingleThreadExecutor" destroy-method="shutdown"/>

    <bean id="exportDeliveryService" class="org.jumbodb.database.service.exporter.ExportDeliveryService">
        <property name="executorService" ref="exportDeliveryExecutor"/>
        <property name="storageManagement" ref="storageManagement"/>
    </bean>

    <bean id="queryUtilService" class="org.jumbodb.database.service.queryutil.QueryUtilService">
        <property name="jumboSearcher" ref="jumboSearcher"/>
        <property name="jumboQueryConverterService" ref="jumboQueryConverterService"/>
    </bean>


    <cache:annotation-driven cache-manager="cacheManager" />

    <bean id="cacheManager"
          class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcache"/>
    </bean>

    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:org/jumbodb/database/ehcache.xml"/>
        <property name="shared" value="false"/>
        <property name="cacheManagerName" value="jumbodb-cache"/>
    </bean>

    <context:mbean-server id="mbeanserver" />

    <bean class="net.sf.ehcache.management.ManagementService" init-method="init">
        <constructor-arg>
            <bean factory-bean="cacheManager" factory-method="getCacheManager"/>
        </constructor-arg>
        <constructor-arg ref="mbeanserver" />
        <constructor-arg value="true" />
        <constructor-arg value="true" />
        <constructor-arg value="true" />
        <constructor-arg value="true" />
    </bean>

</beans>
