apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'cargo'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: "groovy"


sourceCompatibility = 1.6
targetCompatibility = 1.6

archivesBaseName = 'jumbodb'

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}

configurations {
    compile.exclude group: "commons-logging", module: "commons-logging"
    compile.exclude group: "log4j", module: "log4j"
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8'
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.5.9'
    }
}

dependencies {
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-jmx:2.0.8"
    compile 'org.springframework:spring-mock:2.0.8'
    compile 'cglib:cglib:2.2.2'

    compile 'commons-io:commons-io:2.4'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'joda-time:joda-time:2.1'
    compile 'org.freemarker:freemarker:2.3.19'
    compile 'commons-lang:commons-lang:2.6'
    compile "org.xerial.snappy:snappy-java:1.0.5-M4"
    compile "net.minidev:json-smart:2.0-RC2"
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
//    compile 'org.slf4j:slf4j-jdk14:1.7.5'
//    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'javax.servlet:jstl:1.2'
    compile 'commons-fileupload:commons-fileupload:1.2.2'
    compile project(':commons:query')
    compile project(':commons:geo')
    compile project(':connectors:jumbodb-java-connector')

//    providedCompile 'javax.servlet:servlet-api:2.5'

    compile "org.webjars:jquery:1.9.1"
    compile "org.webjars:jquery-ui:1.9.2"
    compile "org.webjars:bootstrap:2.3.1"
    compile "org.webjars:angularjs:1.1.3"

    groovy "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile "org.spockframework:spock-core:0.6-groovy-1.8"

    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:1.9.0'

//    providedCompile 'javax.servlet:jsp-api:2.0'
    providedCompile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
//    providedCompile "org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}"
    providedCompile "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    providedCompile "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    providedCompile "org.eclipse.jdt.core.compiler:ecj:3.6"

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
    cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"

}

tomcatRun {
    httpPort = 9000
    httpsPort = 9443
    enableSSL = false
}

cargo {
    containerId = 'tomcat7x'
    port = Integer.valueOf(jumboCargoPort)

    deployable {
        context = jumboCargoContext
    }

    remote {
        hostname = jumboCargoHostname
        username = jumboCargoUsername
        password = jumboCargoPassword
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}